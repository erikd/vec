# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' '--config=cabal.haskell-ci' 'cabal.project'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.13.20211116
#
# REGENDATA ("0.13.20211116",["github","--config=cabal.haskell-ci","cabal.project"])
#
name: Haskell-CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-18.04
    timeout-minutes:
      60
    container:
      image: buildpack-deps:bionic
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.2.1
            compilerKind: ghc
            compilerVersion: 9.2.1
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.1
            compilerKind: ghc
            compilerVersion: 9.0.1
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.10.4
            compilerKind: ghc
            compilerVersion: 8.10.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.8.4
            compilerKind: ghc
            compilerVersion: 8.8.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.6.5
            compilerKind: ghc
            compilerVersion: 8.6.5
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.4.4
            compilerKind: ghc
            compilerVersion: 8.4.4
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.2.2
            compilerKind: ghc
            compilerVersion: 8.2.2
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-8.0.2
            compilerKind: ghc
            compilerVersion: 8.0.2
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-7.10.3
            compilerKind: ghc
            compilerVersion: 7.10.3
            setup-method: hvr-ppa
            allow-failure: false
          - compiler: ghc-7.8.4
            compilerKind: ghc
            compilerVersion: 7.8.4
            setup-method: hvr-ppa
            allow-failure: false
      fail-fast: false
    steps:
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            mkdir -p "$HOME/.ghcup/bin"
            curl -sL https://downloads.haskell.org/ghcup/0.1.17.3/x86_64-linux-ghcup-0.1.17.3 > "$HOME/.ghcup/bin/ghcup"
            chmod a+x "$HOME/.ghcup/bin/ghcup"
            "$HOME/.ghcup/bin/ghcup" install ghc "$HCVER"
            "$HOME/.ghcup/bin/ghcup" install cabal 3.6.2.0
          else
            apt-add-repository -y 'ppa:hvr/ghc'
            apt-get update
            apt-get install -y "$HCNAME"
            mkdir -p "$HOME/.ghcup/bin"
            curl -sL https://downloads.haskell.org/ghcup/0.1.17.3/x86_64-linux-ghcup-0.1.17.3 > "$HOME/.ghcup/bin/ghcup"
            chmod a+x "$HOME/.ghcup/bin/ghcup"
            "$HOME/.ghcup/bin/ghcup" install cabal 3.6.2.0
          fi
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=$HOME/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> "$GITHUB_ENV"
          HCDIR=/opt/$HCKIND/$HCVER
          if [ "${{ matrix.setup-method }}" = ghcup ]; then
            HC=$HOME/.ghcup/bin/$HCKIND-$HCVER
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HOME/.ghcup/bin/$HCKIND-pkg-$HCVER" >> "$GITHUB_ENV"
            echo "HADDOCK=$HOME/.ghcup/bin/haddock-$HCVER" >> "$GITHUB_ENV"
            echo "CABAL=$HOME/.ghcup/bin/cabal-3.6.2.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          else
            HC=$HCDIR/bin/$HCKIND
            echo "HC=$HC" >> "$GITHUB_ENV"
            echo "HCPKG=$HCDIR/bin/$HCKIND-pkg" >> "$GITHUB_ENV"
            echo "HADDOCK=$HCDIR/bin/haddock" >> "$GITHUB_ENV"
            echo "CABAL=$HOME/.ghcup/bin/cabal-3.6.2.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          fi

          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV" ; else echo "ARG_TESTS=--disable-tests" >> "$GITHUB_ENV" ; fi
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          echo "HEADHACKAGE=false" >> "$GITHUB_ENV"
          echo "ARG_COMPILER=--$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
          echo "GHCJSARITH=0" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          cat >> $CABAL_CONFIG <<EOF
          program-default-options
            ghc-options: $GHCJOBS +RTS -M3G -RTS
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: cache (tools)
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-tools-8df336bd
          path: ~/.haskell-ci-tools
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.6.2.0/cabal-plan-0.6.2.0-x86_64-linux.xz > cabal-plan.xz
          echo 'de73600b1836d3f55e32d80385acc055fd97f60eaa0ab68a755302685f5d81bc  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: install cabal-docspec
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/phadej/cabal-extras/releases/download/cabal-docspec-0.0.0.20211114/cabal-docspec-0.0.0.20211114.xz > cabal-docspec.xz
          echo 'e224700d9e8c9ec7ec6bc3f542ba433cd9925a5d356676c62a9bd1f2c8be8f8a  cabal-docspec.xz' | sha256sum -c -
          xz -d < cabal-docspec.xz > $HOME/.cabal/bin/cabal-docspec
          rm -f cabal-docspec.xz
          chmod a+x $HOME/.cabal/bin/cabal-docspec
          cabal-docspec --version
      - name: install doctest
        run: |
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then $CABAL --store-dir=$HOME/.haskell-ci-tools/store v2-install $ARG_COMPILER --ignore-project -j2 doctest --constraint='doctest ^>=0.17' ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest --version ; fi
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: source
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/bin" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/dec" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/fin" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/ral" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/vec" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/ral-lens" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/vec-lens" >> cabal.project
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/ral-optics" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: $GITHUB_WORKSPACE/source/vec-optics" >> cabal.project ; fi
          echo "packages: $GITHUB_WORKSPACE/source/tests" >> cabal.project
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_bin="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/bin-[0-9.]*')"
          echo "PKGDIR_bin=${PKGDIR_bin}" >> "$GITHUB_ENV"
          PKGDIR_dec="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/dec-[0-9.]*')"
          echo "PKGDIR_dec=${PKGDIR_dec}" >> "$GITHUB_ENV"
          PKGDIR_fin="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/fin-[0-9.]*')"
          echo "PKGDIR_fin=${PKGDIR_fin}" >> "$GITHUB_ENV"
          PKGDIR_ral="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/ral-[0-9.]*')"
          echo "PKGDIR_ral=${PKGDIR_ral}" >> "$GITHUB_ENV"
          PKGDIR_vec="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/vec-[0-9.]*')"
          echo "PKGDIR_vec=${PKGDIR_vec}" >> "$GITHUB_ENV"
          PKGDIR_ral_lens="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/ral-lens-[0-9.]*')"
          echo "PKGDIR_ral_lens=${PKGDIR_ral_lens}" >> "$GITHUB_ENV"
          PKGDIR_vec_lens="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/vec-lens-[0-9.]*')"
          echo "PKGDIR_vec_lens=${PKGDIR_vec_lens}" >> "$GITHUB_ENV"
          PKGDIR_ral_optics="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/ral-optics-[0-9.]*')"
          echo "PKGDIR_ral_optics=${PKGDIR_ral_optics}" >> "$GITHUB_ENV"
          PKGDIR_vec_optics="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/vec-optics-[0-9.]*')"
          echo "PKGDIR_vec_optics=${PKGDIR_vec_optics}" >> "$GITHUB_ENV"
          PKGDIR_tests="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/tests-[0-9.]*')"
          echo "PKGDIR_tests=${PKGDIR_tests}" >> "$GITHUB_ENV"
          rm -f cabal.project cabal.project.local
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_bin}" >> cabal.project
          echo "packages: ${PKGDIR_dec}" >> cabal.project
          echo "packages: ${PKGDIR_fin}" >> cabal.project
          echo "packages: ${PKGDIR_ral}" >> cabal.project
          echo "packages: ${PKGDIR_vec}" >> cabal.project
          echo "packages: ${PKGDIR_ral_lens}" >> cabal.project
          echo "packages: ${PKGDIR_vec_lens}" >> cabal.project
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: ${PKGDIR_ral_optics}" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then echo "packages: ${PKGDIR_vec_optics}" >> cabal.project ; fi
          echo "packages: ${PKGDIR_tests}" >> cabal.project
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package bin" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package dec" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package fin" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package ral" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package vec" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package ral-lens" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package vec-lens" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package ral-optics" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package vec-optics" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "package tests" >> cabal.project ; fi
          if [ $((HCNUMVER >= 80200)) -ne 0 ] ; then echo "    ghc-options: -Werror=missing-methods" >> cabal.project ; fi
          cat >> cabal.project <<EOF
          allow-newer: cassava-0.5.2.0:base
          allow-newer: vector-th-unbox-0.2.1.7:base
          allow-newer: vector-th-unbox-0.2.1.7:template-haskell
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: $_ installed\n" unless /^(bin|dec|fin|ral|ral-lens|ral-optics|tests|vec|vec-lens|vec-optics)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct ; fi
      - name: doctest
        run: |
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_bin} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_dec} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_fin} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_ral} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_vec} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_ral_lens} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_vec_lens} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_ral_optics} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_vec_optics} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then cd ${PKGDIR_tests} || false ; fi
          if [ $((HCNUMVER >= 80600 && HCNUMVER < 90000)) -ne 0 ] ; then doctest  src ; fi
      - name: docspec
        run: |
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then cabal-docspec $ARG_COMPILER ; fi
      - name: cabal check
        run: |
          cd ${PKGDIR_bin} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_dec} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_fin} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_ral} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_vec} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_ral_lens} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_vec_lens} || false
          ${CABAL} -vnormal check
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then cd ${PKGDIR_ral_optics} || false ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then cd ${PKGDIR_vec_optics} || false ; fi
          if [ $((HCNUMVER >= 80000)) -ne 0 ] ; then ${CABAL} -vnormal check ; fi
          cd ${PKGDIR_tests} || false
          ${CABAL} -vnormal check
      - name: haddock
        run: |
          if [ $((HCNUMVER >= 80600)) -ne 0 ] ; then $CABAL v2-haddock $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all ; fi
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: prepare for constraint sets
        run: |
          rm -f cabal.project.local
      - name: constraint set mini
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -adjunctions' --constraint='vec -distributive' --constraint='vec -semigroupoids' --constraint='ral -adjunctions' --constraint='ral -distributive' --constraint='ral -semigroupoids' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -adjunctions' --constraint='vec -distributive' --constraint='vec -semigroupoids' --constraint='ral -adjunctions' --constraint='ral -distributive' --constraint='ral -semigroupoids' all
      - name: constraint set ral-no-adjunctions
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -adjunctions' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -adjunctions' all
      - name: constraint set ral-no-semigroupoids
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -semigroupoids' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -semigroupoids' all
      - name: constraint set ral-no-distributive
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -distributive' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='ral -distributive' all
      - name: constraint set vec-no-adjunctions
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -adjunctions' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -adjunctions' all
      - name: constraint set vec-no-semigroupoids
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -semigroupoids' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -semigroupoids' all
      - name: constraint set vec-no-distributive
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -distributive' --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --constraint='vec -distributive' all
